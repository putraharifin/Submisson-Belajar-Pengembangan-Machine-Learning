# -*- coding: utf-8 -*-
"""Sub2_timeseries_Muhammad Putra Harifin Pane.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sgYO8mVUfobJkVAAQR0HFJg8OcxWJX9O

# Muhammad Putra Harifin Pane
"""

# impor semua library yang dibutuhkan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from keras.layers import Dense, LSTM, Dropout
from keras.models import Sequential
from tensorflow.keras.optimizers import SGD
from sklearn import preprocessing

# Panggil Dataset kedalam program
from google.colab import files
uploaded = files.upload()

# load dataset
df = pd.read_csv('DATA-RUMAH.csv')
df.head(10)

# total data
df.shape

# data info
df.info()

# null check
df.isnull().sum()

df.info()

df.head()

df = df.drop(['NO', 'NAMA RUMAH', 'HARGA', 'KT','KM','GRS'], axis=1)
df

# Melakukan pelabelan data
data_train = df.values
X = data_train[:,0:1] #Atribut
Y = data_train[:,1:2] #Label
data_train

# Mengubah dataset menjadi format yang dapat diterima model
def windowed_dataset(series, shuffle_buffer, window_size, batch_size):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

# Normalisasi data
min_max_scaler = preprocessing.MinMaxScaler()
Y_scale = min_max_scaler.fit_transform(Y)

# Melakukan splitting data
train_date, test_date, train_price, test_price = train_test_split(X, Y_scale, test_size=0.2)

train_set = windowed_dataset(train_price, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(test_price, window_size=60, batch_size=100, shuffle_buffer=1000)

# Membuat model
from keras.layers import Dense, LSTM, Dropout
model = Sequential([
  LSTM(60, input_shape=(360,1)),
  Dropout(0.2),
  Dense(100, activation="relu"),
  Dense(30, activation="relu"),
  Dense(1),
])

# Membuat fitur callback
minMAE = 0.1
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('mae')< minMAE):
      print('\nNilai minimum MAE telah tercapai, proses dihentikan!')
      self.model.stop_training = True

callbacks = myCallback()

# Menambahkan optimizer
optimizer = SGD(learning_rate=1.0000e-03, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

# Melakukan training data
history = model.fit(train_set, epochs=100, validation_data=val_set, callbacks=callbacks)

# Menampilkan plotting MAE
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

# Menampilkan plotting Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()